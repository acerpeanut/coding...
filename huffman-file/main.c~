#define DECODE
#include "bigInt.h"
#include "huffuman.h"
#include <stdio.h>
#include "encode.h"
#include "decode.h"
#ifndef DECODE
typedef struct huffmantr{    // build a tree through encode-file
	unsigned char c;
	struct huffmantr *left,*right;
}huffmantr;

huffmantr root;

void decode_tree(char* input){
	root.c=0;
	root.left=root.right=0;
	
	char**s=(char**)malloc(sizeof(char*)*256);
	int i=0;
	FILE* fp=fopen(input,"rb");
	for(i=0;i<256;i++){
		s[i]=(char*)malloc(sizeof(char)*100);
		fread(s[i],1,100,fp);
	}
	fclose(fp);
	for(i=0;i<256;i++){
		huffmantr *pt=&root;
		char* p=s[i];
		while(*p){
			if(*p=='0'){
				if(pt->left==0){
					pt->left=(huffmantr*)malloc(sizeof(huffmantr));
					pt = pt->left;
					pt->left=pt->right=0;
				}
				else{
					pt = pt->left;
				}
			}
			else if(*p=='1'){
				if(pt->right==0){
					pt->right=(huffmantr*)malloc(sizeof(huffmantr));
					pt = pt->right;
					pt->left=pt->right=0;
				}
				else{
					pt = pt->right;
				}
			}
			p++;
		}
		pt->c=i;
	}
}	
	
void decode(char* input,char* output){
	FILE* fp=fopen(input,"rb");
	FILE* fq=fopen(output,"wb");
	int i,j,size;
	huffmantr* p=&root;
	unsigned char s[10];
	unsigned char c;
	while((size=fread(s,1,10,fp))>0){
		for(i=0;i<size;i++){
			for(j=0;j<8;j++){
				if((s[i]>>(7-j))&1){
					p=p->right;
				}
				else{
					p=p->left;
				}
				if(!(p->left)){
					c=p->c;
					p=&root;
					fwrite(&c,1,1,fq);
				}
			}
		}
	}
	fclose(fp);
	fclose(fq);
}
			

#endif

int main(int argc,char*argv[]){
	int enc_dec=0;   // 0: enc   1: dec
	char* input="hello";  // default input file name
	char* dec=0;            
	char* output=0;
	char* helpMessage="usage:\n %s -enc -tf input.enc input -o output\n %s -dec -tf input.enc input.hf -o output\n";
	int i;
	if(argc>1){
		input=argv[1];
		for(i=1;i<argc;i++){
			if(argv[i][0] == '-'){
				if(strcmp(argv[i],"-o")==0){
					i++;
					output=argv[i];
				}
				else if(strcmp(argv[i],"-tf")==0){
					i++;
					dec = argv[i];
				}
				else if(strcmp(argv[i],"-enc")==0){
					enc_dec=0;
				}
				else if(strcmp(argv[i],"-dec")==0){
					enc_dec=1;
				}
				else if(strcmp(argv[i],"-h")==0){
					printf(helpMessage,argv[0],argv[0]);
					return 0;
				}
			}
			else{
				input = argv[i];
			}
		}
	}
	else{
		printf(helpMessage,argv[0],argv[0]);
		return 0;
	}
	int len=strlen(input);
	if(dec==0){
		/* 编码所生成的中间文件，解码所依赖的文件  */
	       	dec=(char*)malloc(sizeof(char)*(len+2));
		strcpy(dec,input);
		strcpy(dec+len,".enc");
	}
	if(output==0){
	       	output=(char*)malloc(sizeof(char)*(len+5));
		strcpy(output,input);
		/* 解码，输出文件  */
		if(enc_dec){
			strcpy(output+len,".out");
		}
		/*   编码，输出文件            */
		else{
			strcpy(output+len,".hf");
		}
	}
	if(enc_dec){
		decode_tree(dec);
		decode(input,output);
	}
	else{
		encode_tree(input,dec);
		encode(input,output);
	}
	return 0;
}
